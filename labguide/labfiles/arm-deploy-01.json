{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.10.61.36676",
      "templateHash": "11581359877485192348"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "metadata": {
        "description": "A unique environment name (max 6 characters, alphanumeric only)."
      }
    },
     "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "sshKeyData": {
      "type": "securestring"
    },
    "InstallCloudLabsShadow": {
      "type": "string",
      "defaultValue": "yes",
      "allowedValues": [
        "yes",
        "no"
      ],
      "metadata": {
        "description": "Required for CloudlabsShadow, value should be yes if you want to install otherwise no"
      }
    },
    "AzureUserName": {
      "type": "string",
      "metadata": {
        "description": "AzureUserName, AzurePassword, DeploymentID parameters are required for Azure Creds file, Must use in all Windows LabVMs "
      }
    },
    "AzurePassword": {
      "type": "securestring"
    },
    "ODLID": {
      "type": "string"
    },
    "KubernetesServicePrincipalClientId": {
      "type": "securestring"
    },
    "KubernetesServicePrincipalClientSecret": {
      "type": "securestring"
    },
    "KubernetesServicePrincipalRoleGuid": {
      "type": "string",
      "defaultValue": "[guid(resourceGroup().id)]"
    },
    "objectID": {
      "type": "string"
    },
    "CosmosLocation": {
      "type": "string",
      "defaultValue": "eastus"
    },
    "CosmosLocationName": {
      "type": "string",
      "defaultValue": "East US"
    },
    "CosmosPairedLocation": {
      "type": "string",
      "defaultValue": "westus"
    },
    "CosmosPairedLocationName": {
      "type": "string",
      "defaultValue": "West US"
    },
    "deploymentID": {
      "type": "string"
    },
    "trainerUserName": {
      "type": "string"
    },
    "trainerUserPassword": {
      "type": "string"
    },
    "AppID": {
      "type": "string"
    },
    "AppSecret": {
      "type": "string"
    },
  
    "sqlPassword": {
      "type": "string"
    },
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]"
    },
    "aksLinuxAdminUsername": {
      "type": "string"
    },
    "prefix": {
      "type": "string",
      "defaultValue": "contosotraders"
    },
    "prefixHyphenated": {
      "type": "string",
      "defaultValue": "contoso-traders"
    }
  },
  "variables": {
    "$fxv#0": "$ErrorActionPreference = 'Stop'\n$storageAccount = Get-AzStorageAccount -ResourceGroupName $env:ResourceGroupName -AccountName $env:StorageAccountName\nEnable-AzStorageStaticWebsite -Context $storageAccount.Context -IndexDocument 'index.html' -ErrorDocument404Path 'index.html'\n",
    "$fxv#1": "$ErrorActionPreference = 'Stop'\n$storageAccount = Get-AzStorageAccount -ResourceGroupName $env:ResourceGroupName -AccountName $env:StorageAccountName\nEnable-AzStorageStaticWebsite -Context $storageAccount.Context -IndexDocument 'index.html' -ErrorDocument404Path 'index.html'\n",
    "$fxv#2": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDmGzcTpLPWs7LSA8xCVDXgAa/9dLR+7OWAkcxjHcfZ++vpBhww2MbN3WErdTv/3ItheqRIxwhs1sZ2D2NKHdg69NAU1gZrVDUTQosRyt7qa2xQxm5vO3vsPr9rHWKscwbev/KtUt2rQMWE4yDoozn9yUqYtWvW9Nj+/PMCyWJ48WNweEMh4MMbvfZozoSV1qFIVT+8R4xHDP1FtjQOD+P88cpB81xgUtQGXkKQgRGPxhMwS/S8CcEIPGJufh7mVjUrcXZNnv+Uf5NSSBdVvUKhwUiW7JqgVI38vqL6OOGnEO34GfCMTLQoPPFt3cTCyJFqvYY2w7XGYMNV3xYxortiaxKfdflrd4BOqejm/dxFMuRt96WIHiUN7u8G7lTZ2DoAJviOXxodDrgm33nFHQjhO0XndEkZ44DbGd/aOLk36jyMOW2Z25wVILGggB6lMsPcE6VrTQsOT0RtzdA59v3gdq7Phs/H0Oqhi9uA1rsgsd7sqzj4vpdaq9rrAK1gQ9ODQi8kN5pvwD5wWgnzT78/3kMQq2oLtrZrbPFNQS5TZJ9Hu/kMnCxRpf5rAIvG6u5wP4Up64Goa8y7ZOBHs3I0WGw55HL0NRkJRqd9PIvPo/C7cYoy5U1tskzzJkZoTPsU+4AQtPojuRX0OQlSH+VvXbEzyVJTnrL9FsWbfWm6KQ== localadmin@highwaystar\n",
    "kvName": "[format('{0}kv{1}', parameters('prefix'), parameters('environment'))]",
    "kvSecretNameProductsApiEndpoint": "productsApiEndpoint",
    "kvSecretNameProductsDbConnStr": "productsDbConnectionString",
    "kvSecretNameProfilesDbConnStr": "profilesDbConnectionString",
    "kvSecretNameStocksDbConnStr": "stocksDbConnectionString",
    "kvSecretNameCartsApiEndpoint": "cartsApiEndpoint",
    "kvSecretNameCartsDbConnStr": "cartsDbConnectionString",
    "kvSecretNameImagesEndpoint": "imagesEndpoint",
    "kvSecretNameAppInsightsConnStr": "appInsightsConnectionString",
    "userAssignedMIForKVAccessName": "[format('{0}-mi-kv-access{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "stocksDbAcctName": "[format('{0}-stocks{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "stocksDbName": "stocksdb",
    "stocksDbStocksContainerName": "stocks",
    "cartsDbAcctName": "[format('{0}-carts{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "cartsDbName": "cartsdb",
    "cartsDbStocksContainerName": "carts",
    "productsApiAppSvcPlanName": "[format('{0}-products{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "productsApiAppSvcName": "[format('{0}-products{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "productsApiSettingNameKeyVaultEndpoint": "KeyVaultEndpoint",
    "productsApiSettingNameManagedIdentityClientId": "ManagedIdentityClientId",
    "productsDbServerName": "[format('{0}-products{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "productsDbName": "productsdb",
    "productsDbServerAdminLogin": "localadmin",
    "productsDbServerAdminPassword": "[parameters('sqlPassword')]",
    "profilesDbServerName": "[format('{0}-profiles{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "profilesDbName": "profilesdb",
    "profilesDbServerAdminLogin": "localadmin",
    "profilesDbServerAdminPassword": "[parameters('sqlPassword')]",
    "cartsApiAcaName": "[format('{0}-carts{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "cartsApiAcaEnvName": "[format('{0}acaenv{1}', parameters('prefix'), parameters('environment'))]",
    "cartsApiAcaSecretAcrPassword": "acr-password",
    "cartsApiAcaContainerDetailsName": "[format('{0}-carts{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "cartsApiSettingNameKeyVaultEndpoint": "KeyVaultEndpoint",
    "cartsApiSettingNameManagedIdentityClientId": "ManagedIdentityClientId",
    "productImagesStgAccName": "[format('{0}img{1}', parameters('prefix'), parameters('environment'))]",
    "productImagesProductDetailsContainerName": "product-details",
    "productImagesProductListContainerName": "product-list",
    "uiStgAccName": "[format('{0}ui{1}', parameters('prefix'), parameters('environment'))]",
    "ui2StgAccName": "[format('{0}ui2{1}', parameters('prefix'), parameters('environment'))]",
    "imageClassifierStgAccName": "[format('{0}ic{1}', parameters('prefix'), parameters('environment'))]",
    "imageClassifierWebsiteUploadsContainerName": "website-uploads",
    "cdnProfileName": "[format('{0}-cdn{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "cdnImagesEndpointName": "[format('{0}-images{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "cdnUiEndpointName": "[format('{0}-ui{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "cdnUi2EndpointName": "[format('{0}-ui2{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "redisCacheName": "[format('{0}-cache{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "acrName": "[format('{0}acr{1}', parameters('prefix'), parameters('environment'))]",
    "loadTestSvcName": "[format('{0}-loadtest{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "logAnalyticsWorkspaceName": "[format('{0}-loganalytics{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "appInsightsName": "[format('{0}-ai{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "portalDashboardName": "[format('{0}-dashboard{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "aksClusterName": "[format('{0}-aks{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "aksClusterDnsPrefix": "[format('{0}-aks{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "aksClusterNodeResourceGroup": "[format('{0}-aks-nodes-rg-{1}', parameters('prefixHyphenated'), parameters('environment'))]",
    "resourceTags": {
      "Product": "[parameters('prefixHyphenated')]",
      "Environment": "testing"
    },
    
  
    "osDiskType": "StandardSSD_LRS",
    "location": "[resourceGroup().location]",
    "virtualNetworkName": "[concat('contosotraders', '-vnet')]",
    "virtualNetworAddressPrefixes": [
      "172.16.0.0/16"
    ],
    "virtualNetworkSubnets": [
      {
        "name": "default",
        "properties": {
          "addressPrefix": "172.16.0.0/24"
        }
      }
    ],
    "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetName": "default",
    "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]",
    "networkSecurityGroupName": "[concat('labvm', '-nsg')]",
    "networkSecurityGroupRules": [
      {
        "name": "RDP",
        "properties": {
          "priority": 300,
          "protocol": "TCP",
          "access": "Allow",
          "direction": "Inbound",
          "sourceAddressPrefix": "*",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*",
          "destinationPortRange": "3389"
        }
      }
    ],
    "publicIpAddressName": "[concat('labvm', '-ip')]",
    "publicIpAddressType": "Dynamic",
    "publicIpAddressSku": "Basic",
    "networkInterfaceName": "[concat('labvm-', 'nic')]",
    "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
    "virtualMachineName": "[concat('labvm-', parameters('deploymentID'))]",
    "virtualMachineSize": "Standard_DS2_v2",
    "networkSecurityGroupNameLinux": "[concat('contosotraders', '-nsg')]",
    "service_name": "[concat('contosotraders', parameters('deploymentID'))]",
    "rgName": "[resourceGroup().name]",

    "managementSubnetName": "default",
    "networkSecurityGroupRulesLinux": [
      {
        "name": "SSH",
        "properties": {
          "priority": 300,
          "protocol": "TCP",
          "access": "Allow",
          "direction": "Inbound",
          "sourceAddressPrefix": "*",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*",
          "destinationPortRange": "22"
        }
      },
      {
        "name": "allow-app-endpoints",
        "properties": {
          "priority": 301,
          "protocol": "*",
          "access": "Allow",
          "direction": "Inbound",
          "sourceAddressPrefix": "*",
          "sourcePortRange": "*",
          "destinationAddressPrefix": "*",
          "destinationPortRange": "3000-3010"
        }
      }
    ],
    "cloudlabsCommon": "[concat(' -AzureUserName ', parameters('AzureUserName'), ' -AzurePassword ', parameters('AzurePassword'), ' -AzureTenantID ', variables('AzureTenantID'), ' -AzureSubscriptionID ', variables('AzureSubscriptionID'), ' -ODLID ', parameters('ODLID'), ' -DeploymentID ', parameters('DeploymentID'), ' -InstallCloudLabsShadow ', parameters('InstallCloudLabsShadow'), ' ', '-AppID', ' ',parameters('AppID'), ' ', '-AppSecret', ' ',parameters('AppSecret'))]",
    "Enable-CloudLabsEmbeddedShadow": "[concat(' -adminUsername ', parameters('adminUsername'), ' -trainerUserName ', parameters('trainerUserName'), ' -trainerUserPassword ', parameters('trainerUserPassword'))]",
    "publicIpAddressNameLinux": "[concat('contosotraders-', 'ip')]",
    "AzureSubscriptionID": "[subscription().subscriptionId]",
    "AzureTenantID": "[subscription().tenantId]",
    "publicIpAddressTypeLinux": "Static",
    "publicIpAddressSkuLinux": "Basic",
    "networkInterfaceNameLinux": "[concat('contosotraders-', parameters('deploymentID'))]",
    "nsgIdLinux": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameLinux'))]",
    "sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
    "virtualMachineNameLinux": "contosotraders",
    "virtualMachineSizeLinux": "Standard_D2s_v3",
    "registryName": "[concat('contosotraders', parameters('deploymentID'))]",
    "logAnalyticsName": "[concat('contosotraders-', parameters('deploymentID'))]",
    "logAnalyticsSku": "standalone",
    "logAnalyticsId": "[resourceId(resourceGroup().name, 'Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
    "cosmosName": "[concat('contosotraders-', parameters('deploymentID'))]",
    "cosmosSku": "Standard",
    "cosmosApi": "MongoDB",
    "cosmosApiExperience": "Azure Cosmos DB for MongoDB API",
    "appInsightsNames": [
      "content-web",
      "content-api"
    ],
    "ubuntuExtensionScriptFolder": "CustomScripts",
    "ubuntuExtensionScriptFileName": "shellscript.sh ",
    "publicIpAddressDNSName": "[concat('contosotradersd', parameters('deploymentID'))]",
    "publicIpAddressDNSNameLinux": "[concat('contosotraders', parameters('deploymentID'))]"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameProductsApiEndpoint'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "endpoint url (fqdn) of the products api",
        "value": "placeholder"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameProductsDbConnStr'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "connection string to the products db",
        "value": "[format('Server=tcp:{0}.database.windows.net,1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', variables('productsDbServerName'), variables('productsDbName'), variables('productsDbServerAdminLogin'), variables('productsDbServerAdminPassword'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameProfilesDbConnStr'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "connection string to the profiles db",
        "value": "[format('Server=tcp:{0}.database.windows.net,1433;Initial Catalog={1};Persist Security Info=False;User ID={2};Password={3};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', variables('profilesDbServerName'), variables('profilesDbName'), variables('profilesDbServerAdminLogin'), variables('profilesDbServerAdminPassword'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameStocksDbConnStr'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "connection string to the stocks db",
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('stocksDbAcctName')), '2022-02-15-preview').connectionStrings[0].connectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('stocksDbAcctName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameCartsApiEndpoint'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "endpoint url (fqdn) of the carts api",
        "value": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameCartsDbConnStr'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "connection string to the carts db",
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cartsDbAcctName')), '2022-02-15-preview').connectionStrings[0].connectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cartsDbAcctName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameImagesEndpoint'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "endpoint url of the images cdn",
        "value": "[format('https://{0}', reference(resourceId('Microsoft.Cdn/profiles/endpoints', variables('cdnProfileName'), variables('cdnImagesEndpointName'))).hostName)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/endpoints', variables('cdnProfileName'), variables('cdnImagesEndpointName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), variables('kvSecretNameAppInsightsConnStr'))]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "contentType": "connection string to the app insights instance",
        "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).ConnectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('kvName'), 'replace')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[parameters('tenantId')]",
            "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedMIForKVAccessName'))).principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          },
          {
            "tenantId": "[parameters('tenantId')]",
            "objectId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))).identityProfile.kubeletidentity.objectId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedMIForKVAccessName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-02-15-preview",
      "name": "[format('{0}/{1}/{2}', variables('stocksDbAcctName'), variables('stocksDbName'), variables('stocksDbStocksContainerName'))]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "resource": {
          "id": "[variables('stocksDbStocksContainerName')]",
          "partitionKey": {
            "paths": [
              "/id"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('stocksDbAcctName'), variables('stocksDbName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-02-15-preview",
      "name": "[format('{0}/{1}', variables('stocksDbAcctName'), variables('stocksDbName'))]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "resource": {
          "id": "[variables('stocksDbName')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('stocksDbAcctName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-02-15-preview",
      "name": "[format('{0}/{1}/{2}', variables('cartsDbAcctName'), variables('cartsDbName'), variables('cartsDbStocksContainerName'))]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "resource": {
          "id": "[variables('cartsDbStocksContainerName')]",
          "partitionKey": {
            "paths": [
              "/Email"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cartsDbAcctName'), variables('cartsDbName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-02-15-preview",
      "name": "[format('{0}/{1}', variables('cartsDbAcctName'), variables('cartsDbName'))]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "resource": {
          "id": "[variables('cartsDbName')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cartsDbAcctName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('productsDbServerName'), variables('productsDbName'))]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "capacity": 5,
        "tier": "Basic",
        "name": "Basic"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('productsDbServerName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('productsDbServerName'), 'AllowAllWindowsAzureIps')]",
      "properties": {
        "endIpAddress": "0.0.0.0",
        "startIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('productsDbServerName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('productsDbServerName'), 'AllowLocalDevelopment')]",
      "properties": {
        "endIpAddress": "255.255.255.255",
        "startIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('productsDbServerName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('profilesDbServerName'), variables('profilesDbName'))]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "capacity": 5,
        "tier": "Basic",
        "name": "Basic"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('profilesDbServerName'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('profilesDbServerName'), 'AllowAllWindowsAzureIps')]",
      "properties": {
        "endIpAddress": "0.0.0.0",
        "startIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('profilesDbServerName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}/{2}', variables('productImagesStgAccName'), 'default', variables('productImagesProductDetailsContainerName'))]",
      "properties": {
        "publicAccess": "Container"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('productImagesStgAccName'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}/{2}', variables('productImagesStgAccName'), 'default', variables('productImagesProductListContainerName'))]",
      "properties": {
        "publicAccess": "Container"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('productImagesStgAccName'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('productImagesStgAccName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('productImagesStgAccName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('uiStgAccName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('uiStgAccName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('ui2StgAccName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('ui2StgAccName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}/{2}', variables('imageClassifierStgAccName'), 'default', variables('imageClassifierWebsiteUploadsContainerName'))]",
      "properties": {
        "publicAccess": "Container"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('imageClassifierStgAccName'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-05-01",
      "name": "[format('{0}/{1}', variables('imageClassifierStgAccName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('imageClassifierStgAccName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('kvName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "accessPolicies": [
          {
            "objectId": "31de563b-fc1a-43a2-9031-c47630038328",
            "tenantId": "[parameters('tenantId')]",
            "permissions": {
              "secrets": [
                "get",
                "list",
                "delete",
                "set",
                "recover",
                "backup",
                "restore"
              ]
            }
          }
        ],
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "softDeleteRetentionInDays": 7,
        "tenantId": "[parameters('tenantId')]"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "[variables('userAssignedMIForKVAccessName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]"
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-02-15-preview",
      "name": "[variables('stocksDbAcctName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "enableFreeTier": false,
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "locations": [
          {
            "locationName": "[parameters('resourceLocation')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-02-15-preview",
      "name": "[variables('cartsDbAcctName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "enableFreeTier": false,
        "capabilities": [
          {
            "name": "EnableServerless"
          }
        ],
        "locations": [
          {
            "locationName": "[parameters('resourceLocation')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2022-05-01-preview",
      "name": "[variables('productsDbServerName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "administratorLogin": "[variables('productsDbServerAdminLogin')]",
        "administratorLoginPassword": "[variables('productsDbServerAdminPassword')]",
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2022-05-01-preview",
      "name": "[variables('profilesDbServerName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "administratorLogin": "[variables('profilesDbServerAdminLogin')]",
        "administratorLoginPassword": "[variables('profilesDbServerAdminPassword')]",
        "publicNetworkAccess": "Enabled"
      }
    },
 
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('productImagesStgAccName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('uiStgAccName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "DeploymentScript",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]"
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('ui2StgAccName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2022-01-31-preview",
      "name": "DeploymentScript2",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]"
    },
   
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('imageClassifierStgAccName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    {
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2022-05-01-preview",
      "name": "[variables('cdnProfileName')]",
      "location": "global",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "name": "Standard_Microsoft"
      }
    },
    {
      "type": "Microsoft.Cdn/profiles/endpoints",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('cdnProfileName'), variables('cdnImagesEndpointName'))]",
      "location": "global",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "isCompressionEnabled": true,
        "contentTypesToCompress": [
          "image/svg+xml"
        ],
        "deliveryPolicy": {
          "rules": [
            {
              "name": "Global",
              "order": 0,
              "actions": [
                {
                  "name": "CacheExpiration",
                  "parameters": {
                    "typeName": "DeliveryRuleCacheExpirationActionParameters",
                    "cacheBehavior": "SetIfMissing",
                    "cacheType": "All",
                    "cacheDuration": "10:00:00"
                  }
                }
              ]
            }
          ]
        },
        "originHostHeader": "[format('{0}.blob.core.windows.net', variables('productImagesStgAccName'))]",
        "origins": [
          {
            "name": "[format('{0}-blob-core-windows-net', variables('productImagesStgAccName'))]",
            "properties": {
              "hostName": "[format('{0}.blob.core.windows.net', variables('productImagesStgAccName'))]",
              "originHostHeader": "[format('{0}.blob.core.windows.net', variables('productImagesStgAccName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/endpoints",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('cdnProfileName'), variables('cdnUiEndpointName'))]",
      "location": "global",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "isCompressionEnabled": true,
        "contentTypesToCompress": [
          "application/eot",
          "application/font",
          "application/font-sfnt",
          "application/javascript",
          "application/json",
          "application/opentype",
          "application/otf",
          "application/pkcs7-mime",
          "application/truetype",
          "application/ttf",
          "application/vnd.ms-fontobject",
          "application/xhtml+xml",
          "application/xml",
          "application/xml+rss",
          "application/x-font-opentype",
          "application/x-font-truetype",
          "application/x-font-ttf",
          "application/x-httpd-cgi",
          "application/x-javascript",
          "application/x-mpegurl",
          "application/x-opentype",
          "application/x-otf",
          "application/x-perl",
          "application/x-ttf",
          "font/eot",
          "font/ttf",
          "font/otf",
          "font/opentype",
          "image/svg+xml",
          "text/css",
          "text/csv",
          "text/html",
          "text/javascript",
          "text/js",
          "text/plain",
          "text/richtext",
          "text/tab-separated-values",
          "text/xml",
          "text/x-script",
          "text/x-component",
          "text/x-java-source"
        ],
        "deliveryPolicy": {
          "rules": [
            {
              "name": "Global",
              "order": 0,
              "actions": [
                {
                  "name": "CacheExpiration",
                  "parameters": {
                    "typeName": "DeliveryRuleCacheExpirationActionParameters",
                    "cacheBehavior": "SetIfMissing",
                    "cacheType": "All",
                    "cacheDuration": "10:00:00"
                  }
                }
              ]
            }
          ]
        },
        "originHostHeader": "[format('{0}.z13.web.core.windows.net', variables('uiStgAccName'))]",
        "origins": [
          {
            "name": "[format('{0}-z13-web-core-windows-net', variables('uiStgAccName'))]",
            "properties": {
              "hostName": "[format('{0}.z13.web.core.windows.net', variables('uiStgAccName'))]",
              "originHostHeader": "[format('{0}.z13.web.core.windows.net', variables('uiStgAccName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/endpoints",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', variables('cdnProfileName'), variables('cdnUi2EndpointName'))]",
      "location": "global",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "isCompressionEnabled": true,
        "contentTypesToCompress": [
          "application/eot",
          "application/font",
          "application/font-sfnt",
          "application/javascript",
          "application/json",
          "application/opentype",
          "application/otf",
          "application/pkcs7-mime",
          "application/truetype",
          "application/ttf",
          "application/vnd.ms-fontobject",
          "application/xhtml+xml",
          "application/xml",
          "application/xml+rss",
          "application/x-font-opentype",
          "application/x-font-truetype",
          "application/x-font-ttf",
          "application/x-httpd-cgi",
          "application/x-javascript",
          "application/x-mpegurl",
          "application/x-opentype",
          "application/x-otf",
          "application/x-perl",
          "application/x-ttf",
          "font/eot",
          "font/ttf",
          "font/otf",
          "font/opentype",
          "image/svg+xml",
          "text/css",
          "text/csv",
          "text/html",
          "text/javascript",
          "text/js",
          "text/plain",
          "text/richtext",
          "text/tab-separated-values",
          "text/xml",
          "text/x-script",
          "text/x-component",
          "text/x-java-source"
        ],
        "deliveryPolicy": {
          "rules": [
            {
              "name": "Global",
              "order": 0,
              "actions": [
                {
                  "name": "CacheExpiration",
                  "parameters": {
                    "typeName": "DeliveryRuleCacheExpirationActionParameters",
                    "cacheBehavior": "SetIfMissing",
                    "cacheType": "All",
                    "cacheDuration": "02:00:00"
                  }
                }
              ]
            },
            {
              "name": "EnforceHttps",
              "order": 1,
              "conditions": [
                {
                  "name": "RequestScheme",
                  "parameters": {
                    "typeName": "DeliveryRuleRequestSchemeConditionParameters",
                    "matchValues": [
                      "HTTP"
                    ],
                    "operator": "Equal",
                    "negateCondition": false,
                    "transforms": []
                  }
                }
              ],
              "actions": [
                {
                  "name": "UrlRedirect",
                  "parameters": {
                    "typeName": "DeliveryRuleUrlRedirectActionParameters",
                    "redirectType": "Found",
                    "destinationProtocol": "Https"
                  }
                }
              ]
            }
          ]
        },
        "originHostHeader": "[format('{0}.z13.web.core.windows.net', variables('ui2StgAccName'))]",
        "origins": [
          {
            "name": "[format('{0}-z13-web-core-windows-net', variables('ui2StgAccName'))]",
            "properties": {
              "hostName": "[format('{0}.z13.web.core.windows.net', variables('ui2StgAccName'))]",
              "originHostHeader": "[format('{0}.z13.web.core.windows.net', variables('ui2StgAccName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('cdnProfileName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2022-02-01-preview",
      "name": "[variables('acrName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true,
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.LoadTestService/loadTests",
      "apiVersion": "2022-12-01",
      "name": "[variables('loadTestSvcName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedMIForKVAccessName')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedMIForKVAccessName'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsWorkspaceName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled",
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Portal/dashboards",
      "apiVersion": "2020-09-01-preview",
      "name": "[variables('portalDashboardName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "properties": {
        "lenses": [
          {
            "order": 0,
            "parts": [
              {
                "position": {
                  "x": 0,
                  "y": 0,
                  "rowSpan": 4,
                  "colSpan": 2
                }
              }
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2022-09-02-preview",
      "name": "[variables('aksClusterName')]",
      "location": "[parameters('resourceLocation')]",
      "tags": "[variables('resourceTags')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "dnsPrefix": "[variables('aksClusterDnsPrefix')]",
        "nodeResourceGroup": "[variables('aksClusterNodeResourceGroup')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": 0,
            "count": 3,
            "vmSize": "standard_d2s_v3",
            "osType": "Linux",
            "mode": "System"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('aksLinuxAdminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[variables('$fxv#2')]"
              }
            ]
          }
        },
        "addonProfiles": {
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
      ]
    },
    
    {
      "apiVersion": "2016-09-01",
      "name": "pid-e843308b-3ce2-42a2-b743-2f21b36a5e68",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "name": "[variables('networkSecurityGroupName')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-02-01",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroupRules')]"
      }
    },
    {
      "name": "[variables('virtualNetworkName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-02-01",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[variables('virtualNetworAddressPrefixes')]"
        },
        "subnets": "[variables('virtualNetworkSubnets')]"
      }
    },
    {
      "name": "[variables('publicIpAddressName')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2019-02-01",
      "location": "[variables('location')]",
      "properties": {
        "publicIpAllocationMethod": "[variables('publicIpAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('publicIpAddressDNSName'))]"
        }
      },
      "sku": {
        "name": "[variables('publicIpAddressSku')]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2018-10-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "name": "[variables('virtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-06-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
      ],
      "properties": {
        "osProfile": {
          "computerName": "[variables('virtualMachineName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": "true"
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('virtualMachineSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('osDiskType')]"
            }
          },

          "imageReference": {
            "publisher": "microsoftvisualstudio",
            "offer": "visualstudio2022",
            "sku": "vs-2022-ent-latest-ws2022",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('virtualMachineName'),'/', 'winExtension')]",
      "apiVersion": "2018-06-01",
      "location": "[resourceGroup().location]",
      "comments": "Script",
      "tags": {
        "displayName": "VM Extension"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/CloudLabsAI-Azure/Cloud-Native-Application/sumit-fix/labguide/labfiles/psscript-5.ps1",
            "https://experienceazure.blob.core.windows.net/templates/cloudlabs-common/cloudlabs-windows-functions.ps1"
          ]
        },
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Bypass -File psscript-5.ps1',variables('cloudlabsCommon'),variables('Enable-CloudLabsEmbeddedShadow'))]"
        }
      }
    },
    {
      "name": "[variables('networkSecurityGroupNameLinux')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-02-01",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroupRulesLinux')]"
      }
    },
    {
      "name": "[variables('publicIpAddressNameLinux')]",
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2019-02-01",
      "location": "[variables('location')]",
      "properties": {
        "publicIpAllocationMethod": "[variables('publicIpAddressTypeLinux')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('publicIpAddressDNSNameLinux'))]"
        }
      },
      "sku": {
        "name": "[variables('publicIpAddressSkuLinux')]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2018-10-01",
      "name": "[variables('networkInterfaceNameLinux')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupNameLinux'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressNameLinux'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', variables('publicIpAddressNameLinux'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('nsgIdLinux')]"
        }
      }
    },
    {
      "name": "[variables('virtualMachineNameLinux')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-10-01",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceNameLinux'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('virtualMachineSizeLinux')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameLinux'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('virtualMachineNameLinux')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        }
      },
      "resources": [
        {
          "name": "ubuntuExtension",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-06-01",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineNameLinux'))]"
          ],
          "tags": {
            "displayName": "ubuntuExtension"
          },
          "properties": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "https://experienceazure.blob.core.windows.net/templates/cloud-native-application/scripts/shellscript.sh"
              ],
              "commandToExecute": "[concat('sh ', variables('ubuntuExtensionScriptFileName'), parameters('adminUsername'))]"
            }
          }
        }
      ]
    },


    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-11-01",
      "name": "[concat('WorkspaceDeployment-contosotraders-', parameters('deploymentID'))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-08-01",
              "name": "[variables('logAnalyticsName')]",
              "location": "[variables('location')]",
              "properties": {
                "sku": {
                  "name": "[variables('logAnalyticsSku')]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-11-01",
      "name": "[concat('SolutionDeployment-contosotraders-', parameters('deploymentID'))]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'WorkspaceDeployment-contosotraders-', parameters('deploymentID'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[concat('ContainerInsights', '(', variables('logAnalyticsName'), ')')]",
              "location": "[variables('location')]",
              "properties": {
                "workspaceResourceId": "[variables('logAnalyticsId')]"
              },
              "plan": {
                "name": "[concat('ContainerInsights', '(', variables('logAnalyticsName'), ')')]",
                "product": "OMSGallery/ContainerInsights",
                "promotionCode": "",
                "publisher": "Microsoft"
              }
            }
          ]
        }
      }
    },

    {
      "type": "Microsoft.DocumentDb/databaseAccounts",
      "apiVersion": "2015-04-08",
      "name": "[variables('cosmosName')]",
      "location": "[parameters('CosmosLocation')]",
      "kind": "[variables('cosmosApi')]",
      "properties": {
        "databaseAccountOfferType": "[variables('cosmosSku')]",
        "locations": [
          {
            "id": "[concat(variables('cosmosName'), '-', parameters('CosmosLocation'))]",
            "failoverPriority": 0,
            "locationName": "[parameters('CosmosLocationName')]"
          },
          {
            "id": "[concat(variables('cosmosName'), '-', parameters('CosmosPairedLocation'))]",
            "failoverPriority": 1,
            "locationName": "[parameters('CosmosPairedLocationName')]"
          }
        ],
        "enableMultipleWriteLocations": false,
        "isVirtualNetworkFilterEnabled": false
      },
      "tags": {
        "defaultExperience": "[variables('cosmosApiExperience')]"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightsNames')[copyIndex()]]",
      "location": "[variables('location')]",
      "kind": "web",
      "properties": {
        "ApplicationId": "[variables('appInsightsNames')[copyIndex()]]",
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest"
      },
      "copy": {
        "name": "appinsightscopy",
        "count": "[length(variables('appInsightsNames'))]",
        "mode": "Parallel"
      }
    },
    {
      "type": "Microsoft.DataMigration/services",
      "apiVersion": "2021-10-30-preview",
      "name": "[variables('service_name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "sku": {
        "name": "Standard_1vCores",
        "tier": "Standard",
        "size": "1 vCores"
      },
      "kind": "Cloud",
      "properties": {
        "virtualSubnetId": "[resourceId(variables('rgName'),'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('managementSubnetName'))]"
      }
    }
    
  
],
  "outputs": {
    "DeploymentID": {
      "type": "string",
      "value": "[parameters('DeploymentID')]"
    },
    "Region": {
      "type": "string",
      "value": "[resourceGroup().location]"
    },
    "LabVM DNS Name": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpAddressName'))).dnsSettings.fqdn]",
      "type": "string"
    },
    "LabVM Username": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "LabVM Password": {
      "type": "string",
      "value": "[parameters('adminPassword')]"
    },
    "Build Agent VM Public IP": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameLinux'))).ipAddress]",
      "type": "string"
    },
    "Build Agent VM Dns Name": {
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameLinux'))).dnsSettings.fqdn]",
      "type": "string"
    },
    "Build Agent VM Username": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    },
    "Build Agent VM Password": {
      "type": "string",
      "value": "[parameters('adminPassword')]"
    },
    "Command to Connect to Build Agent VM ": {
      "type": "string",
      "value": "[concat('ssh admincontoso@', reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameLinux'))).dnsSettings.fqdn)]"
    },
    "Trainer Password": {
      "value": "[parameters('trainerUserPassword')]",
      "type": "string"
    }
  }
}
